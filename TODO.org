# TODO: See if using slots for stringables is a good idea:
#       https://stackoverflow.com/questions/472000/usage-of-slots

# TODO: Rename remote settings so they fit in with
#          - local settings
#          - torrent, file, peer, tracker filters
#          - torrent, file, peer, tracker column names



# TODO: Hit alt-enter on torrent - the new tab is named id=?? instead of torrent name

# TODO: Reverse dns: https://stackoverflow.com/questions/17775365/

# TODO: In usertypes, separate types from settings:
#         - Like NumberFloat/Int, types derive from int, float, list, etc
#         - Types are immutable, but they should return instances of their type
#           when operated on (e.g. adding)
#         - Settings expose the same methods and properties but use new
#           immutable types internally.


This is a list of rough ideas.  Feel free to contribute your own, ask/answer
questions and point out issues.

* commands

** TODO New command: 'filter'
   1. Create 'filter' command that adds/removes/clears filters of the currently
      focused list.  Make it work similar to the 'sort' command.
   2. Change default keybindings:
       1. 'n' in 'tabs' (or 'main'?) context starts a keychain that opens a
          torrent/peer/tracker/file list in a new tab.
       2. 'f' in any '*list' context starts a keychain that applies different
          filters to the currently focused list.
   3. Implement 'interactive' command (see below) and use it to add comparative
      filters to lists with more 'f ...' key chains.

** TODO Show number of selected torrents/files
    The best place would probably be in the bottom bar.  Either implement that
    in tui.infobar.TorrentCountersWidget or create a new widget.

    Another place could be the column header for the 'marked' column.  With no
    torrents marked, show 'tui.marked.on', otherwise the number of marked
    torrents.  But that would widen the column to at least 3 characters.

** TODO New command: interactive
   Take an arbitrary amount of (option, prompt) pairs and any command.  The
   command contains placeholders.  First, for each (option, prompt) pair, the
   user has to supply a value.  Each placeholder is then replaced with its
   value and the command is executed if all placeholders are filled.

   Example: interactive dest:Destination -- mv {dest}

   This is mostly useful for better keybindings in the TUI, but it may also
   have benefits on the CLI.


* tui

** TODO Display sort orders in column headers
   In each column header, show an up/down arrow if the list is sorted by it.

** TODO Create view that lists all settings
   The view is opened when the TUI version of the command 'set' is called
   without any arguments.  The user can navigate to settings and change them
   interactively.

   Available server settings should be provided as a list by SettingsAPI to make
   it easier to support other BitTorrent clients with slightly different
   settings.


* client

** TODO Better moving average for peer download rate estimation
   Maybe this one?
   https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average

** TODO NotImplementedError
   The classes exported by `client` should derive from base classes that raise
   NotImplementedError in all undefined methods and properties.

*** TODO NotImplementedError callbacks
    Figure out how to avoid tons of ~try: ... except NotImplementedError as e:
    log.error(e)~.  Maybe with a callback somewhere?


#+STARTUP: showeverything
#+OPTIONS: toc:nil num:nil H:10
