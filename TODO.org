This is list a of rough ideas.  Feel free to contribute your own, ask/answer
questions and point out issues.

* commands

** TODO Show number of selected torrents/files
    The best place would probably be in the bottom bar.  Either implement that
    in tui.infobar.TorrentCountersWidget or create a new widget.

    Another place could be the column header for the 'marked' column.  With no
    torrents marked, show 'tui.marked.on', otherwise the number of marked
    torrents.  But that would widen the column to at least 3 characters.

** TODO New command: interactive
   Take an arbitrary amount of (option, prompt) pairs and any command.  The
   command contains placeholders.  First, for each (option, prompt) pair, the
   user has to supply a value.  Each placeholder is then replaced with its
   value and the command is executed if all placeholders are filled.

   Example: interactive dest:Destination -- mv {dest}

   This is mostly useful for better keybindings in the TUI, but it may also
   have benefits on the CLI.


* tui

** TODO Create view that lists all settings
   The view is opened when the TUI version of the command 'set' is called
   without any arguments.  The user can navigate to settings and change them
   interactively.

   Available server settings should be provided as a list by SettingsAPI to make
   it easier to support other BitTorrent clients with slightly different
   settings.


* client

** TODO Better moving average for peer download rate estimation
   Maybe this one?
   https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average

** TODO NotImplementedError
   The classes exported by `client` should derive from base classes that raise
   NotImplementedError in all undefined methods and properties.

*** TODO NotImplementedError callbacks
    Figure out how to avoid tons of ~try: ... except NotImplementedError as e:
    log.error(e)~.  Maybe with a callback somewhere?


#+STARTUP: showeverything
#+OPTIONS: toc:nil num:nil H:10
